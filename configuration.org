#+TITLE:  My Emacs Configuration
#+AUTHOR: Diego Vicente MartÃ­n
#+EMAIL:  diegovicente@protonmail.com

* Introduction

The idea generating a new configuration file using ~org-mode~ and literate
programming is taken from [[https://youtu.be/SzA2YODtgK4][Harry Schwartz's talk about ~org-mode~]]. When Emacs is
booted, all the source blocks from this file are used to generate the
configuration file.

* Basic Emacs Setup
** My information

All the relevant and personal information that Emacs needs. If you are going to
use it, needless to say to use your own information.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Diego Vicente"
      user-mail-address "diegovicente@protonmail.com"
      calendar-latitude 63.4
      calendar-longitude 10.4
      calendar-location-name "Trondheim, Norway")
#+END_SRC

** Add MELPA

*The* package repository for Emacs. Must have, it's really really useful for
installing all kinds of packages.

#+BEGIN_SRC emacs-lisp
;; Add MELPA
(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list
   'package-archives
   '("MELPA" . "http://melpa.org/packages/") t)
  (package-initialize))
#+END_SRC

** Define my packages

Inspired by [[http://aaronbedra.com/emacs.d/][Aaron Bedra's Emacs 24 Configuration]], I use this variable to define
all the third-party packages that I use. 

#+BEGIN_SRC emacs-lisp
(defvar my-packages '(buffer-move
                      base16-theme
                      powerline
                      ido
                      helm
                      magit
                      projectile
                      flycheck
                      company
                      smartparens
                      elpy
                      intero
                      org-ref
                      org-bullets
                      git-gutter
                      git-gutter-fringe)
  "My packages")
#+END_SRC

** Install my packages

Using the same variable defined before, check if the packages are installed and
install them if necessary.

#+BEGIN_SRC emacs-lisp
(defun packages-installed ()
  (cl-loop for pkg in my-packages
           when (not (package-installed-p pkg)) do (cl-return nil)
           finally (cl-return t)))

(unless (packages-installed)
  (message "%s" "Refreshing package database...")
  (package-refresh-contents)
  (dolist (pkg my-packages)
    (when (not (package-installed-p pkg))
      (package-install pkg))))
#+END_SRC

** Disable ~yes-or-no~ messages

For some reason, there are different types of confirmation prompts in
Emacs. One of them forces you to write "yes" and the other one only to press
"y", so I disable the first type.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Disable startup message

I simply prefer to have a scratch buffer ready when I boot up, with ~org-mode~
running. Not a great Lisp developer myself.

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
      initial-scratch-message nil
      initial-major-mode 'org-mode)
#+END_SRC

** Disable the warning when killing a buffer w/ process

When a buffer (i.e ~something.py~) has an associated process (in that case,
~Python~ for completion), Emacs will prompt you when trying to kill it, asking
for confirmation. I think it just interferes in my way, so I disable it as
well.

#+BEGIN_SRC emacs-lisp
(setq kill-buffer-query-functions
  (remq 'process-kill-buffer-query-function
         kill-buffer-query-functions))
#+END_SRC

** Fill the ~exec-path~ variable

I spent too much time until I figured this out. Since I mostly use GUI Emacs,
the ~exec-path~ variable is empty at start (it has not been started through
shell). That's why we need a function to loading the contents of ~$PATH~ to
Emacs variable and call it at start.

#+BEGIN_SRC emacs-lisp
(defun set-exec-path-from-shell-PATH ()
  "Update the variable 'exec-path' using the contents of $PATH."
  (interactive)
  (let ((path-from-shell
	 (replace-regexp-in-string
	  "[ \t\n]*$" "" (shell-command-to-string
			  "$SHELL --login -i -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))

(set-exec-path-from-shell-PATH)
#+END_SRC

** Enable auto-indent

By default, inserting a new line in Emacs is not associated with indent.

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

** Insert new line without breaking

One of the things I really miss from vim is the shortcut ~o~, which was used to
insert a new line below the line in which the cursor is. To have the same
behavior in Emacs, I found this custom function that I bound to ~C-o~.

#+BEGIN_SRC emacs-lisp
(defun insert-new-line-below ()
  "Add a new line below the current line"
  (interactive)
  (let ((oldpos (point)))
    (end-of-line)
    (newline-and-indent)))

(global-set-key (kbd "C-o") 'insert-new-line-below)
#+END_SRC 

** Move buffers around

If we want to swap buffers location in frames, there's no fast way to do it in
Emacs by default. To do it, a good option that I found is to use ~buffer-move~
package, and use these key bindings.

#+BEGIN_SRC emacs-lisp
(require 'buffer-move)
(global-set-key (kbd "C-x w <up>")     'buf-move-up)
(global-set-key (kbd "C-x w <down>")   'buf-move-down)
(global-set-key (kbd "C-x w <left>")   'buf-move-left)
(global-set-key (kbd "C-x w <right>")  'buf-move-right)
#+END_SRC 

** Auto-fill comments

For our comments (only comments, not code) to be automatically filled
in programming modes, we can use this function:

#+BEGIN_SRC emacs-lisp
(defun comment-auto-fill ()
      (setq-local comment-auto-fill-only-comments t)
      (auto-fill-mode 1))

(add-hook 'prog-mode-hook 'comment-auto-fill)
#+END_SRC

** More intuitive regions


thought as default, so I turn it on myself.

#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
(transient-mark-mode t)
#+END_SRC

** Define keybindings to ~eval-buffer~ on init and open ~configuration.org~

Before this magical ~org~ configuration, it was easier to reload Emacs
configuration on the fly: ~M-x eval-buffer RET~. However, now the buffer to
evaluate is not this one, but ~.emacs.d/init.el~. That's why it's probably a
better idea to define a new keybinding that automatically reloads that buffer.

#+BEGIN_SRC emacs-lisp
(defun reload-emacs-configuration()
  "Reload the configuration"
  (interactive)
    (load "~/.emacs.d/init.el"))

(defun open-emacs-configuration ()
  "Open the configuration.org file in buffer"
  (interactive)
    (find-file "~/my-emacs/configuration.org"))

(global-set-key (kbd "C-c c r") 'reload-emacs-configuration)
(global-set-key (kbd "C-c c o") 'open-emacs-configuration)
#+END_SRC

* Graphical Interface
** Disabling GUI defaults

I always use Emacs in its GUI client, but because of the visual capabilities
and not the tools and bars. That's why I like to disable all the graphical
clutter.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** Setting default font

I really like how condensed is [[https://github.com/be5invis/Iosevka][Iosevka]], a coding typeface. Although it may look
weird in the beginning, then it's a joy to have all your code properly fitting
in the screen.

#+BEGIN_SRC emacs-lisp
(set-default-font "Iosevka 14")
#+END_SRC

** Setting my favorite theme

I really like [[https://github.com/chriskempson/base16][base16 color themes]] by Chris Kempson, specially
Eighties. However, lately I am really enjoying Oceanic. They are
available in MELPA. We also use the ~NO-CONFIRM~ flag when loading,
since the file tangling probably makes the code be not in order for
~custom-set-variables~ to do its job.

#+BEGIN_SRC emacs-lisp
(require 'base16-theme)
(load-theme 'base16-oceanicnext t)
#+END_SRC

** Setting the fringe color

I dont'like the fringe to have a different color than the background,
so I run this function at start to set the same color in it. However,
take into account that if you change themes on the fly you need to run
the function again (there is no hook for that).

#+BEGIN_SRC emacs-lisp
(defun set-fringe-as-background ()
  (set-face-attribute 'fringe nil
                      :foreground (face-foreground 'default)
                      :background (face-background 'default)))

(set-fringe-as-background)
#+END_SRC

** Enabling font ligatures

Emacs by default does not support font ligatures. However, I found this
workaround in a Fira Code issue in Github:

#+BEGIN_SRC emacs-lisp
(let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
               (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
               (36 . ".\\(?:>\\)")
               (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
               (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
               (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
               (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
               (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
               (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
               (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
               (48 . ".\\(?:x[a-zA-Z]\\)")
               (58 . ".\\(?:::\\|[:=]\\)")
               (59 . ".\\(?:;;\\|;\\)")
               (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
	       (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
               (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
               (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
               (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
               (91 . ".\\(?:]\\)")
               (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
               (94 . ".\\(?:=\\)")
               (119 . ".\\(?:ww\\)")
	       (123 . ".\\(?:-\\)")
               (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
               (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
               )
             ))
  (dolist (char-regexp alist)
    (set-char-table-range composition-function-table (car char-regexp)
                          `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+END_SRC

As a TODO, it is also worth it to check [[https://gist.github.com/mordocai/50783defab3c3d1650e068b4d1c91495][this other workaround]] that looks much
much better and allows to use it with different hooks.

** Adding ~powerline~ configuration

~powerline~ transforms the mode-line to show a different information with a
very characteristic aesthetic. My configuration for ~powerline~ just sets the
theme and the separators to be the character (due to strange contrast in
MacOS). 

#+BEGIN_SRC emacs-lisp
(require 'powerline)
(powerline-default-theme)
(setq powerline-default-separator 'utf-8)
#+END_SRC

** Highlight changed and uncommited lines

Use the ~git-gutter-fringe~ package for that. For me it's more than enough to
have it in programming modes and in ~org-mode~. Problem is I don't like the
defaults, so I have it quite heavily modified.

#+BEGIN_SRC emacs-lisp
(require 'git-gutter)
(require 'git-gutter-fringe)

(setq-default left-fringe-width  20)
(add-hook 'prog-mode-hook 'git-gutter-mode)
(add-hook 'org-mode-hook 'git-gutter-mode)
#+END_SRC

* Packages & Tools
** ~ido~

~ido~ enables some fuzzy finders in different commands like ~find-file~ or
other buffer related commands. Probably ~helm~ is a better option but I still
have to properly configure it. This enables fuzzy search and enables it everywhere.

#+BEGIN_SRC emacs-lisp
(require 'ido)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC

** ~helm~

As I said, probably redundant to be used alongside ~ido~, but still has much
more places to be used.

#+BEGIN_SRC emacs-lisp
(require 'helm-config)
(helm-mode 1)
#+END_SRC

** ~magit~

A porcelain client for git. ~magit~ alone is a reason to use Emacs over
vi/vim. It is really wonderful to use and you should install right now. This
also binds the status function to ~C-x g~.

#+BEGIN_SRC emacs-lisp
(require 'magit)
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

** ~projectile~

Enables different tools and functions to deal with files related to a
project. To work, it searches for a VCS and sets it as the root of a project. I
have it configured to ignore all files that has not been staged in the git
project. 

#+BEGIN_SRC emacs-lisp
(require 'projectile)
(projectile-global-mode +1)
(setq projectile-use-git-grep t)
#+END_SRC

** ~flycheck~

Checks syntax for different languages. Works wonders, even though sometimes has
to be configured because it really makes things slow.

#+BEGIN_SRC emacs-lisp
(require 'flycheck)
(global-flycheck-mode)
#+END_SRC

** ~company~
*** Require and basic setup

A great auto-completion backend. In my experience is a better choice than
~auto-complete~. In this setup, I enable it everywhere and set the delay and
sorting criteria

#+BEGIN_SRC emacs-lisp
(require 'company)
(add-hook 'after-init-hook 'global-company-mode)
(setq company-idle-delay 0.5)
(setq company-transformers '(company-sort-by-occurrence))
#+END_SRC

*** Enable ~yasnippet~ backends

To plug ~yasnippet~ in the suggestions, we use this solution, found in this
[[https://github.com/syl20bnr/spacemacs/pull/179][Spacemacs issue]].

#+BEGIN_SRC emacs-lisp
(defvar company-mode/enable-yas t "Enable yasnippet for all backends.")

(defun company-mode/backend-with-yas (backend)
  (if (or (not company-mode/enable-yas)
	  (and (listp backend) (member 'company-yasnippet backend)))
      backend
    (append (if (consp backend) backend (list backend))
	    '(:with company-yasnippet))))

(setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
#+END_SRC

** ~smartparens~

Auto-close parenthesis and other characters. Useful as it seems.

#+BEGIN_SRC emacs-lisp
(require 'smartparens)
(require 'smartparens-config)
(add-hook 'prog-mode-hook #'smartparens-mode)
#+END_SRC

** ~expand-region~

Expand region allows to select hierarchically different text regions. It is, in
a way, a replacement for vim text objects.

#+BEGIN_SRC emacs-lisp
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

** Bind ~shell~

I don't use shell as much as I did before customizing Emacs, but still a good
command line is the best option sometimes. Bound it to ~C-c t~

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c t") 'shell)
#+END_SRC

* Programming Modes
** Python

*** Enable ~elpy~

~elpy~ is, in a way, the ~intero~ for Python. To configure it, we first have to
enable it.

#+BEGIN_SRC emacs-lisp
(require 'elpy)
(elpy-enable)
#+END_SRC

*** Set UTF-8 to prevent encoding hell

This is not compulsory but can save you from some headaches.

#+BEGIN_SRC emacs-lisp
(setenv "LANG" "en_US.UTF-8")
(setenv "LC_ALL" "en_US.UTF-8")
(setenv "LC_CTYPE" "en_US.UTF-8")
#+END_SRC

*** Set the backends and version

I like to use Python 3 and ~ipython~ as a REPL. To set these environments:

#+BEGIN_SRC emacs-lisp
(add-to-list 'python-shell-completion-native-disabled-interpreters "ipython")
(add-to-list 'python-shell-completion-native-disabled-interpreters "python3")
(elpy-use-ipython)
(setq elpy-rpc-python-command "python3"
      python-shell-interpreter "ipython"
      python-shell-interpreter-args "--simple-prompt -i")
#+END_SRC

** Haskell
*** Add ~ghci~ to path

Just make sure that Emacs can find it.

#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat "/usr/local/bin/ghci" (getenv "PATH")))
#+END_SRC

*** Enable ~intero~

In my experience, trying to deal with ~haskell-mode~ head-on is a pain in the
ass, and makes programming really slow. However, ~intero~ is a package with
batteries-included that works wonders. The best idea is to install it and hook
it to haskell

#+BEGIN_SRC emacs-lisp
(require 'intero)
(add-hook 'haskell-mode-hook 'intero-mode)
#+END_SRC

* ~org-mode~
** Basic setup and other habits
*** Enable ~auto-fill-mode~ in Emacs

I truly believe that code and other text files have to respect a 79 characters
per line bound. No, 120 is not enough. Of course, for me ~org-mode~ should also
be, so we enable this behaviour to be automatic. Also, keep in mind that Emacs
auto fills to 70 characters, so we have to manually set the 79 limit.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'auto-fill-mode)
(setq-default fill-column 79)
#+END_SRC

*** Ensure LaTeX export options

We need to ensure that the indentation is left unaltered when exporting to
LaTeX, and also to add several options for ~org-ref~ exporting to work properly

#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)

(setq org-latex-default-packages-alist
      (-remove-item
       '("" "hyperref" nil)
       org-latex-default-packages-alist))

(add-to-list 'org-latex-default-packages-alist '("" "natbib" "") t)
(add-to-list 'org-latex-default-packages-alist
	     '("linktocpage,pdfstartview=FitH,colorlinks,
linkcolor=blue,anchorcolor=blue,
citecolor=blue,filecolor=blue,menucolor=blue,urlcolor=blue"
	       "hyperref" nil)
	     t)
#+END_SRC

** Graphical aspects
*** Use syntax highlight in source blocks

When writing source code on a block, if this variable is enabled it will use
the same syntax highlight as the mode supposed to deal with it.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

*** Enable ~org-bullets~

Enable ~org-bullets~ to make it clearer. Also, the defaults are maybe
a bit too much for me, so edit them.

#+BEGIN_SRC emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(setq org-bullets-bullet-list
        '("â" "â" "â" "â" "â" "â"))
#+END_SRC

*** Custom ellipsis

Also, I don't really like ~...~ to be the symbol for an ~org~ ellipsis. I
prefer to set something much more visual:

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " â¤µ")
#+END_SRC

*** TODO Edit headings

And define a different font for ~org~ headings. (NOT WORKING)

#+BEGIN_SRC emacs-lisp
;;(custom-set-faces
;; '(org-bullet-face ((t (:weight bold :height 1.6)))))
;;(setq org-bullets-face-name (quote org-bullet-face))
#+END_SRC

** ~org-ref~

~org-ref~ is a great package that enables a great deal of references and
shortcuts in ~org-mode~ when exporting to different formats like HTML or
LaTeX. The configuration can be a bit of a pain in the ass:

*** Basic setup and default dirs

We require the packages and set the default for the bibliography notes, the
main ~.bib~ bibliography and the directory where the PDFs can be downloaded to.

#+BEGIN_SRC emacs-lisp
(require 'org-ref)
(require 'org-ref-pdf)
(require 'org-ref-url-utils)
(setq org-ref-bibliography-notes "~/bibliography/notes.org"
      org-ref-default-bibliography '("~/bibliography/refs.bib")
      org-ref-pdf-directory "~/bibliography/pdfs")
#+END_SRC 

We also make sure to create the directory if it does not exist

#+BEGIN_SRC emacs-lisp
(unless (file-exists-p org-ref-pdf-directory)
  (make-directory org-ref-pdf-directory t))
#+END_SRC

*** Update the export process

We have to take into account the Bibtex process for the references to
work. TODO: sometimes does not even work this way.

#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process
      '("pdflatex -interaction nonstopmode -output-directory %o %f"
	"bibtex %b"
	"pdflatex -interaction nonstopmode -output-directory %o %f"
	"pdflatex -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

*** Set default key in Bibtex entries

When using tools like ~crossref-add-bibtex-entry~, we want a meaningful key to
be defined in the entries. I found this method in the ~org-ref~ config file.

#+BEGIN_SRC emacs-lisp
(setq bibtex-autokey-year-length 4
      bibtex-autokey-name-year-separator "-"
      bibtex-autokey-year-title-separator "-"
      bibtex-autokey-titleword-separator "-"
      bibtex-autokey-titlewords 2
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length 5)
#+END_SRC

* Other Major Modes
** ~erc~

~erc~ is a IRC client for Emacs. It is a wonderful tool worth checking out, and
requires really little configuration to make to be great.

*** Hide messages from inactive people

This snippet hides all the IRC messages that notify someone has joined, parted
or quitted if that user has been inactive for more than half an hour.

#+BEGIN_SRC emacs-lisp
(setq erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
(setq erc-lurker-threshold-time 1800)
#+END_SRC

*** Use the proper default nickname

~erc~ suggests a default nickname when logging in. ~agis~ is my username, if
you want to set another one just change that argument.

#+BEGIN_SRC emacs-lisp
(setq erc-nick "agis")
#+END_SRC

